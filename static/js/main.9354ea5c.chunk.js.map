{"version":3,"sources":["firebase.js","github.js","Home.js","tech-radar.js","UserRadar.js","MyRadar.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","provider","auth","GithubAuthProvider","axios","require","default","GitHub","accessToken","get","headers","github","Home","state","currentItem","username","items","user","entries","login","bind","onAuthStateChanged","console","log","setState","signInWithPopup","then","a","result","credential","getFollowers","followers","getFollowing","following","userRef","database","ref","uid","set","githubUsername","additionalUserInfo","data","follower","child","entry","role","className","class","this","to","onClick","Component","withRouter","TechRader","window","radar_visualization","svg_id","width","height","colors","background","grid","inactive","title","quadrants","name","rings","color","print_layout","props","id","style","UserRadar","match","params","on","snapshot","val","newState","item","push","label","quadrant","ring","moved","active","link","MyRadar","currentTechnology","currentChange","currentQuadrant","currentRing","handleChange","handleSubmit","e","target","value","preventDefault","technologiesRef","Number","onSubmit","type","placeholder","onChange","App","logout","path","localStorage","getItem","removeItem","history","once","signOut","data-toggle","data-target","aria-controls","aria-expanded","aria-label","aria-hidden","exact","children","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9354ea5c.chunk.js","sourcesContent":["import firebase from 'firebase'\n\nvar config = {\n  apiKey: \"AIzaSyCLPdPZE3AXJWI4IyaxNUH1Vns_btyRmGY\",\n  authDomain: \"radardish-1e181.firebaseapp.com\",\n  databaseURL: \"https://radardish-1e181.firebaseio.com\",\n  projectId: \"radardish-1e181\",\n  storageBucket: \"radardish-1e181.appspot.com\",\n  messagingSenderId: \"1055621417968\",\n  appId: \"1:1055621417968:web:bf2eb90bf497641b0bab35\"\n};\n\nfirebase.initializeApp(config);\nexport const provider = new firebase.auth.GithubAuthProvider();\nexport const auth = firebase.auth();\nexport default firebase;","const axios = require('axios').default;\nclass GitHub {\n  getFollowers(accessToken) {\n    return axios.get('https://api.github.com/user/followers', {headers: {'Authorization': 'token '+accessToken} })\n  }\n\n  getFollowing(accessToken) {\n    return axios.get('https://api.github.com/user/following', {headers: {'Authorization': 'token '+accessToken} })\n  }\n}\n\nexport default GitHub;","import React, { Component } from 'react';\nimport firebase, { auth, provider } from './firebase.js';\nimport GitHub from './github.js';\nimport './App.css';\nimport { Link, withRouter } from \"react-router-dom\";\n\nconst github =  new GitHub();\n\nclass Home extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      currentItem: '',\n      username: '',\n      items: [],\n      user: null,\n      accessToken: null,\n      entries: []\n    }\n    this.login = this.login.bind(this);\n  }\n\n  componentDidMount() {\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        console.log(user);\n        this.setState({ user });\n        // TODO restore access for github\n        // TODO restore additional user information from firebase\n      } \n    });\n  }\n\n  login() {\n    auth.signInWithPopup(provider) \n      .then(async (result) => {\n        const user = result.user;\n        const accessToken = result.credential.accessToken;\n        console.log(\"logged in as\", result);\n        this.setState({\n          user,\n          accessToken\n        });\n        let followers = await github.getFollowers(accessToken);\n        let following = await github.getFollowing(accessToken);\n        \n        console.log(followers);\n        let userRef = firebase.database().ref('users/'+user.uid);\n        userRef.set({\n            accessToken,\n            githubUsername: result.additionalUserInfo.username\n        });\n        for (const follower of followers.data) {\n          userRef.child(\"followers/\"+follower.login).set(follower);\n        }\n        for (const entry of following.data) {\n          userRef.child(\"following/\"+entry.login).set(entry);\n        }\n      });\n  }\n\n  render() {\n    return (\n      <main role=\"main\" className=\"container\">\n        <div class=\"jumbotron\">\n          <div class=\"container\">\n            <h1 class=\"display-3\">Curate your own Tech-Radar and share it with the world</h1>\n            <p>Login with your Github account and create your own Tech Radar. The changed are directly shared with your followers on Github.</p>\n            {this.state.user ?\n              <p><Link className=\"btn btn-light\" to=\"/my\">My Rader</Link></p>\n              :\n              <p><button class=\"btn btn-light\" onClick={this.login}>Login using GitHub</button></p>\n            }\n            \n          </div>\n        </div>\n      </main>\n    );\n  }\n}\nexport default withRouter(Home);\n\n\n/*\n<header>\n          <div className=\"wrapper\">\n            <h1>Fun Food Friends</h1>\n            {this.state.user ?\n              <button onClick={this.logout}>Log Out</button>                \n              :\n              <button onClick={this.login}>Log In</button>              \n            }\n          </div>\n          {this.state.user ?\n          <div>\n            <div className='user-profile'>\n              <img src={this.state.user.photoURL} />\n            </div>\n            <section className=\"add-item\">\n              <form onSubmit={this.handleSubmit}>\n                <input type=\"text\" name=\"currentItem\" placeholder=\"What are you bringing?\" onChange={this.handleChange} value={this.state.currentItem} />\n                <button>Add Item</button>\n              </form>\n            </section>\n          </div>\n          :\n          <div className='wrapper'>\n            <p>You must be logged in to see the potluck list and submit to it.</p>\n          </div>\n          }\n        </header>\n        <div className='container'>\n          <section className='display-item'>\n            <div className=\"wrapper\">\n              <ul>\n                {this.state.items.map((item) => {\n                  return (\n                    <li key={item.id}>\n                      <h3>{item.title}</h3>\n                      <p>brought by: {item.user}</p>\n                    </li>\n                  )\n                })}\n              </ul>\n            </div>\n          </section>\n        </div>\n*/","import React, { Component } from 'react';\n\nclass TechRader extends Component {\n  \n  render() {\n    window.radar_visualization({\n      svg_id: \"radar\",\n      width: 1450,\n      height: 1000,\n      colors: {\n        background: \"#fff\",\n        grid: \"#bbb\",\n        inactive: \"#ddd\"\n      },\n      title: \"My Radar\",\n      quadrants: [\n        { name: \"Languages\" },\n        { name: \"Infrastructure\" },\n        { name: \"Frameworks\" },\n        { name: \"Data Management\" }\n      ],\n      rings: [\n        { name: \"ADOPT\",  color: \"#93c47d\" },\n        { name: \"TRIAL\", color: \"#b7e1cd\" },\n        { name: \"ASSESS\",  color: \"#fce8b2\" },\n        { name: \"HOLD\",  color: \"#f4c7c3\" }\n      ],\n      print_layout: true,\n      entries: this.props.entries\n    });\n\n    var styleObj = {\n    }\n    return (\n      <svg id=\"radar\" style={styleObj}></svg>\n    )\n  }\n}\n\nexport default TechRader;","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport './App.css';\nimport TechRader from './tech-radar.js';\nimport {\n  withRouter\n} from \"react-router-dom\";\n\nclass UserRadar extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      uid: null,\n      entries: []\n      //currentItem: ''\n    }\n  }\n\n  componentDidMount() {\n    const uid = this.props.match.params.uid;\n    this.setState({\n      uid: uid\n      //currentItem: ''\n    });\n    \n    const itemsRef = firebase.database().ref('radars/'+uid);\n    itemsRef.on('value', (snapshot) => {\n      let items = snapshot.val();\n      let newState = [];\n      for (let item in items) {\n        newState.push({\n          label: item,\n          quadrant: items[item].quadrant,\n          ring: items[item].ring,\n          moved: items[item].moved,\n          active: items[item].active,\n          link: items[item].link\n        });\n      }\n      this.setState({\n        entries: newState\n      });\n    }); \n  }\n\n  render() {\n    return (\n      <main role=\"main\" className=\"container-fluid\">\n        <h1> {this.state.uid } </h1>\n        <TechRader entries={this.state.entries}></TechRader>\n      </main>\n    );\n  }\n}\nexport default withRouter(UserRadar);\n\n\n/*\n<header>\n          <div className=\"wrapper\">\n            <h1>Fun Food Friends</h1>\n            {this.state.user ?\n              <button onClick={this.logout}>Log Out</button>                \n              :\n              <button onClick={this.login}>Log In</button>              \n            }\n          </div>\n          {this.state.user ?\n          <div>\n            <div className='user-profile'>\n              <img src={this.state.user.photoURL} />\n            </div>\n            <section className=\"add-item\">\n              <form onSubmit={this.handleSubmit}>\n                <input type=\"text\" name=\"currentItem\" placeholder=\"What are you bringing?\" onChange={this.handleChange} value={this.state.currentItem} />\n                <button>Add Item</button>\n              </form>\n            </section>\n          </div>\n          :\n          <div className='wrapper'>\n            <p>You must be logged in to see the potluck list and submit to it.</p>\n          </div>\n          }\n        </header>\n        <div className='container'>\n          <section className='display-item'>\n            <div className=\"wrapper\">\n              <ul>\n                {this.state.items.map((item) => {\n                  return (\n                    <li key={item.id}>\n                      <h3>{item.title}</h3>\n                      <p>brought by: {item.user}</p>\n                    </li>\n                  )\n                })}\n              </ul>\n            </div>\n          </section>\n        </div>\n*/","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport './App.css';\nimport TechRader from './tech-radar.js';\nimport {\n  withRouter\n} from \"react-router-dom\";\n\nclass MyRadar extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      entries: [],\n      currentTechnology: '',\n      currentChange: 0,\n      currentQuadrant: 0,\n      currentRing: 0,\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this); \n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.id]: e.target.value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const technologiesRef = firebase.database().ref('radars/'+this.props.githubUsername);\n    const item = {\n      \"moved\": Number(this.state.currentChange),\n      \"quadrant\": Number(this.state.currentQuadrant),\n      \"ring\": Number(this.state.currentRing)\n    };\n    technologiesRef.child(this.state.currentTechnology)\n      .set(item)\n    this.setState({\n      currentTechnology: '',\n      currentChange: 0,\n      currentQuadrant: 0,\n      currentRing: 0\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      entries: [],\n      currentTechnology: '',\n      currentChange: 0,\n      currentQuadrant: 0,\n      currentRing: 0,\n    });\n    \n    const itemsRef = firebase.database().ref('radars/'+this.props.githubUsername);\n    itemsRef.on('value', (snapshot) => {\n      let items = snapshot.val();\n      let newState = [];\n      for (let item in items) {\n        newState.push({\n          label: item,\n          quadrant: items[item].quadrant,\n          ring: items[item].ring,\n          moved: items[item].moved,\n          active: items[item].active,\n          link: items[item].link\n        });\n      }\n      this.setState({\n        entries: newState\n      });\n    }); \n  }\n\n  render() {\n\n    return (\n      <main role=\"main\" className=\"container-fluid\">\n        <h1> {this.state.uid } </h1>\n        <TechRader entries={this.state.entries}></TechRader>\n        <form className=\"form-inline\" onSubmit={this.handleSubmit}>\n          <label className=\"sr-only\">Technology</label>\n          <input type=\"text\" className=\"form-control mb-2 mr-sm-2\" id=\"currentTechnology\" placeholder=\"Kotlin\" onChange={this.handleChange} value={this.state.currentTechnology}></input>\n\n          <label className=\"sr-only\">Change</label>\n          <select className=\"form-control\" id=\"currentChange\" onChange={this.handleChange} value={this.state.currentChange}>\n            <option value=\"0\">Unchanged</option>\n            <option value=\"1\">Up</option>\n            <option value=\"-1\">Down</option>\n          </select>\n\n          <label className=\"sr-only\">Quadrant</label>\n          <select className=\"form-control\" id=\"currentQuadrant\" onChange={this.handleChange} value={this.state.currentQuadrant}>\n            <option value=\"0\">Languages</option>\n            <option value=\"1\">Infrastructure</option>\n            <option value=\"2\">Frameworks</option>\n            <option value=\"3\">Data Management</option>\n          </select>\n\n          <label className=\"sr-only\">Ring</label>\n          <select className=\"form-control\" id=\"currentRing\" onChange={this.handleChange} value={this.state.currentRing}>\n            <option value=\"3\">HOLD</option>\n            <option value=\"2\">ASSESS</option>\n            <option value=\"1\">TRIAL</option>\n            <option value=\"0\">ADOPT</option>\n          </select>\n\n          <button type=\"submit\" className=\"btn btn-primary mb-2\">Save</button>\n        </form>\n      </main>\n    );\n  }\n}\nexport default withRouter(MyRadar);","import React, { Component } from 'react';\nimport firebase, { auth, provider } from './firebase.js';\nimport GitHub from './github.js';\nimport './App.css';\nimport Home from './Home.js';\nimport UserRadar from './UserRadar.js';\nimport MyRadar from './MyRadar.js';\n\nimport { Route, Link, withRouter } from \"react-router-dom\";\n\nconst github =  new GitHub();\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      user: null,\n      accessToken: null,\n      githubUsername: null\n    }\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this); \n  }\n\n  componentDidMount() {\n    let path = localStorage.getItem('path');\n    if(path) {\n      localStorage.removeItem('path');\n      this.props.history.push(path);\n    }\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        console.log(user);\n        this.setState({ user });\n        var userRef = firebase.database().ref('users/'+user.uid);\n        userRef.once(\"value\", snapshot => {\n          var item = snapshot.val();\n          var accessToken = item.accessToken;\n          var githubUsername = item.githubUsername;\n          console.log(\"Restored user\", accessToken, githubUsername)\n          this.setState({ \n            accessToken,\n            githubUsername\n          });\n        })\n        // TODO restore access for github\n        // TODO restore additional user information from firebase\n      } \n    });\n  }\n\n  logout() {\n    auth.signOut()\n      .then(() => {\n        this.setState({ \n          user: null,\n          accessToken: null,\n          githubUsername: null\n        });\n      });\n  }\n\n  login() {\n    auth.signInWithPopup(provider) \n      .then(async (result) => {\n        const user = result.user;\n        const accessToken = result.credential.accessToken;\n        const githubUsername = result.additionalUserInfo.username;\n        console.log(\"logged in as\", result);\n        this.setState({\n          user,\n          githubUsername,\n          accessToken\n        });\n        let followers = await github.getFollowers(accessToken);\n        let following = await github.getFollowing(accessToken);\n        \n        console.log(followers);\n        let userRef = firebase.database().ref('users/'+user.uid);\n        userRef.set({\n            accessToken,\n            githubUsername: result.additionalUserInfo.username\n        });\n        for (const follower of followers.data) {\n          userRef.child(\"followers/\"+follower.login).set(follower);\n        }\n        for (const entry of following.data) {\n          userRef.child(\"following/\"+entry.login).set(entry);\n        }\n      });\n  }\n\n  render() {\n    return (\n      <div className='app'>\n        <nav className=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\">\n            <Link className=\"navbar-brand\" to=\"/\">Radardish</Link>\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <ul className=\"navbar-nav mr-auto\">\n            {this.state.user ?\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/my\">My Radar</Link>\n              </li>\n              :\n              <li></li>\n            }\n          </ul>\n          <div className=\"form-inline my-2 my-lg-0\">\n            {this.state.user ?\n              <button className=\"btn btn-dark\" onClick={this.logout}>Log Out</button> \n              :\n              <button className=\"btn btn-light\" onClick={this.login}><i className=\"fa fa-github\" aria-hidden=\"true\"></i> Login</button>\n                   \n            }\n          </div>\n        </nav>\n\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/my\">\n          {this.state.githubUsername ?\n            <MyRadar githubUsername={this.state.githubUsername}/>\n            :\n            <h1>Loading Data</h1>\n          }\n        </Route>\n        <Route path=\"/u/:uid\" children={<UserRadar />} />\n      </div>\n    );\n  }\n}\nexport default withRouter(App);\n\n\n/*\n<header>\n          <div className=\"wrapper\">\n            <h1>Fun Food Friends</h1>\n            {this.state.user ?\n              <button onClick={this.logout}>Log Out</button>                \n              :\n              <button onClick={this.login}>Log In</button>              \n            }\n          </div>\n          {this.state.user ?\n          <div>\n            <div className='user-profile'>\n              <img src={this.state.user.photoURL} />\n            </div>\n            <section className=\"add-item\">\n              <form onSubmit={this.handleSubmit}>\n                <input type=\"text\" name=\"currentItem\" placeholder=\"What are you bringing?\" onChange={this.handleChange} value={this.state.currentItem} />\n                <button>Add Item</button>\n              </form>\n            </section>\n          </div>\n          :\n          <div className='wrapper'>\n            <p>You must be logged in to see the potluck list and submit to it.</p>\n          </div>\n          }\n        </header>\n        <div className='container'>\n          <section className='display-item'>\n            <div className=\"wrapper\">\n              <ul>\n                {this.state.items.map((item) => {\n                  return (\n                    <li key={item.id}>\n                      <h3>{item.title}</h3>\n                      <p>brought by: {item.user}</p>\n                    </li>\n                  )\n                })}\n              </ul>\n            </div>\n          </section>\n        </div>\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}